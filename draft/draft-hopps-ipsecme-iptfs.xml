<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" []>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt"?>
<?rfc toc="yes"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>
<rfc ipr="trust200902"
     category="std"
     docName="draft-hopps-ipsecme-iptfs-00"     submissionType="IETF">
  <front>
    <title abbrev="IP Traffic Flow Security">IP Traffic Flow Security</title>
<author initials='C.' surname='Hopps' fullname='Christian Hopps'><organization>LabN Consulting, L.L.C.</organization><address><email>chopps@chopps.org</email></address></author>  <date/><abstract><t>This document describes a mechanism that improves IPsec traffic
flow security by adding traffic flow confidentiality to encrypted IP
encapsulated traffic. Traffic flow confidentiality is provided by
obscuring the size and frequency of IP traffic using a constant sized
and constant send rate IPsec tunnel.</t></abstract>  </front>  <middle>


<section title="Introduction" anchor="sec-introduction">
<t>Traffic Analysis (<xref target="RFC4301"/>, <xref target="AppCrypt"/>) is the act of extracting
information about data being sent through a network. While one may
directly obscure the data through the use of encryption <xref target="RFC4303"/>,
the traffic pattern itself exposes information due to variations in
it's shape and timing (<xref target="I-D.iab-wire-image"/>, <xref target="AppCrypt"/>).
Hiding the size and frequency of traffic is referred to as Traffic
Flow Confidentiality (TFC) <xref target="RFC4303"/>.</t>

<t><xref target="RFC4303"/> provides for TFC by allowing padding to be added to the
encrypted IP packets and allowing for sending all-pad packets
(protocol 59). This method has the major limitation that it can
significantly under-utilize the available bandwidth.</t>

<t>The IP-TFS solution provides for full TFC without the aforementioned
bandwidth limitation. To do this we use a constant send rate IPsec
<xref target="RFC4303"/> tunnel with fixed-sized encapsulating packets; however,
these fixed-sized packets can contain partial, full or multiple IP
packets to maximize the bandwidth of the tunnel.</t>

<t>For a comparison of the overhead of IP-TFS with the RFC4303
prescribed TFC solution see <xref target="sec-comparisons-of-ip-tfs"></xref>.</t>

<t>Additionally, IP-TFS provides for dealing with network congestion
<xref target="RFC2914"/>. This is important for when the IP-TFS user is not in full
control of the domain through which the IP-TFS tunnel path flows.</t>

<section title="Terminology &amp; Concepts">
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
<xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals,
as shown here.</t>

<t>This document assumes familiarity with IP security concepts described
in <xref target="RFC4301"/>.</t>

</section>

</section>

<section title="The IP-TFS Tunnel">
<t>As mentioned in <xref target="sec-introduction"></xref> IP-TFS utilizes an IPsec <xref target="RFC4303"/>
tunnel as it's transport. To provide for full TFC we send fixed sized
encapsulating packets at a constant rate on the tunnel.</t>

<t>The primary input to the tunnel algorithm is the requested bandwidth
of the tunnel. From this we must determine the size and rate of the
fixed sized packets we will send on the tunnel.</t>

<t>The fixed-packet-size may either be specified manually or can be
determined optimally through the use of Path MTU discovery <xref target="RFC1191"/>
and <xref target="RFC8201"/>.</t>

<t>Given the encapsulating packet size and the requested tunnel
bandwidth we determine the correct packet send rate. The packet send
rate is the requested bandwidth divided by the payload size of the
fixed-packet-size encapsulating packet.</t>

<t>The egress of the IP-TFS tunnel SHOULD NOT impose any restrictions on
tunnel packet size or arrival rate. Packet size and send rate is
entirely the function of the ingress (sending) side of the IP-TFS
tunnel. Indeed, the ingress (sending) side of the IP-TFS tunnel MUST
be allowed to vary the size and rate at which it sends encapsulating
packets, including sending them larger, smaller, faster or slower
than the requested size and rate.</t>

<section title="Tunnel Content">
<t>As previously mentioned, one issue with the TFC padding solution in
<xref target="RFC4303"/> is the large amount of wasted bandwidth as only one IP
packet can be sent per encapsulating packet. In order to maximize
bandwidth IP-TFS breaks this one-to-one association.</t>

<t>With IP-TFS we fragment as well as aggregate the inner IP traffic
flow into the encapsulating IP tunnel packets. We only pad the tunnel
packets if there is no data available to be sent at the time of
tunnel packet transmission.</t>

<t>In order to do this we create a new payload data type identified with
a new IP protocol number IPTFS_PROTOCOL (TBD). A payload of
IPTFS_PROTOCOL type is comprised of a 32 bit header followed by
either a partial, a full or multiple partial or full data-blocks.</t>

<section title="IPSec/ESP Payload">
<figure><artwork><![CDATA[
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 . Outer Encapsulating Header ...                                  .
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 . ESP Header...                                                   .
 +-----------------------------------------------------------------+
 |V|          Reserved           |          BlockOffset            |
 +-----------------------------------------------------------------+
 |       Data Blocks Payload ...                                   ~
 ~                                                                 |
 +-----------------------------------------------------------------|
 . ESP Trailer...                                                  .
 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
]]></artwork></figure>

<t>The BlockOffset value is either zero or some offset into or past the
end of the data blocks payload data. If the value is zero it means
that a new data-block immediately follows the fixed header (i.e., the
BlockOffset value). Conversely if the BlockOffset value is non-zero
it points at the start of the next data block. It can be the case
that the BlockOffset points past the end of the data block payload
data. This simply means that the next data-block occurs in a
subsequent encapsulating packet. When the BlockOffset is non-zero the
data immediately following the header belongs to the previous
data-block that is still being re-assembled.</t>

<t>The V (version) bit is included for future compatibility.</t>

</section>

<section title="Data-Blocks">
<figure><artwork><![CDATA[
 +-----------------------------------------------------------------+
 | Type  | rest of IPv4, IPv6 or pad.
 +--------
]]></artwork></figure>

<t>A data-block is defined by a 4-bit type code followed by the data
block data. The types values have been carefully chosen to coincide
with the IPv4/IPv6 version field values so that no per-data-block
type overhead is required to encapsulate an IP packet. Likewise, the
length of the data block is extracted from the encapsulated IPv4 or
IPv6 packet's length field.</t>

</section>

<section title="No Implicit Padding">
<t>It's worth noting that there is no need for implicit pads at the end
of an encapsulating packet. Even when the start of a data block
occurs near the end of a encapsulating packet such that there is no
room for the length field of the encapsulated header to be included
in the current encapsulating packet, the fact that the length comes
at a known location and as is guaranteed to be present is enough to
fetch the length field from the subsequent encapsulating packet
payload.</t>

</section>

<section title="IP Header Value Mapping">
<t><xref target="RFC4301"/> provides some direction on when and how to map various
values from an inner IP header to the outer encapsulating header,
namely the Don't-Fragment (DF) bit (<xref target="RFC0791"/> and <xref target="RFC8200"/>), the
Differentiated Services (DS) field <xref target="RFC2474"/> and the Explicit
Congestion Notification (ECN) field <xref target="RFC3168"/>. Unlike <xref target="RFC4301"/> with
IP-TFS we may and often will be encapsulating more than 1 IP packet
per ESP packet. To deal with this we further restrict these mappings.
In particular we never map the inner DF bit as it is unrelated to the
IP-TFS tunnel functionality; we never directly fragment the inner
packets and the inner packets will not affect the fragmentation of
the outer encapsulation packets. Likewise, the ECN value need not be
mapped as any congestion related to the constant send rate IP-TFS
tunnel is unrelated (by design!) to the inner traffic flow. Finally,
by default the DS field should not be copied although an
implementation may choose to allow for configuration to override this
behavior. An implementation SHOULD also allow the DS value to be set
by configuration.</t>

</section>

</section>

<section title="Exclusive SA Use">
<t>It is not the intention of this specification to allow for mixed use
of an IPsec SA. In other words, an SA that is created for IP-TFS is
exclusively for IP-TFS use and MUST NOT have non-IP-TFS payloads such
as IP (IP protocol 4) or TCP transport (IP protocol 6) intermixed
with IP-TFS (IP protocol TBD) payloads. While it's possible to
envision making the algorithm work in the presence of sequence number
skips in the IP-TFS payload stream, the added complexity is not
deemed worthwhile. Other IPsec uses can configure and use their own
SAs.</t>

</section>

<section title="Initiation of TFS mode">
<t>While normally a user will configure their IPsec tunnel to operate in
IP-TFS mode to start, we also allow IP-TFS mode to be enabled post-SA
creation. This may be useful for debugging or other purposes. In this
late enabled mode the receiver would switch to IP-TFS mode on receipt
of the first ESP payload with the IPTFS_PROTOCOL indicated as the
payload type.</t>

</section>

<section title="Example of an encapsulated IP packet flow">
<t>Below we show an example inner IP packet flow within the
encapsulating tunnel packet stream. Notice how encapsulated IP
packets can start and end anywhere, and more than one or less than 1
may occur in a single encapsulating packet.</t>

<figure><artwork><![CDATA[
  Offset: 0        Offset: 100    Offset: 2900    Offset: 1400
 [ ESP1  (1500) ][ ESP2  (1500) ][ ESP3  (1500) ][ ESP4  (1500) ]
 [--800--][--800--][60][-240-][--4000----------------------][pad]
]]></artwork></figure>


<t>The encapsulated IP packet flow (lengths include IP header and
payload) is as follows: an 800 octet packet, an 800 octet packet, a 60
octet packet, a 240 octet packet, a 4000 octet packet.</t>

<t>The BlockOffset values in the 4 IP-TFS payload headers for this
packet flow would thus be: 0, 100, 2900, 1400 respectively. The first
encapsulating packet ESP1 has a zero BlockOffset which points at the
IP data block immediately following the IP-TFS header. The following
packet ESP2s BlockOffset points inward 100 octets to the start of the
60 octet data block. The third encapsulating packet ESP3 contains the
middle portion of the 4000 octet data block so the offset points past
its end and into the forth encapsulating packet. The fourth packet
ESP4s offset is 1400 pointing at the padding which follows the
completion of the continued 4000 octet packet.</t>

<t>Having the BlockOffset always point at the next available data block
allows for quick recovery with minimal inner packet loss in the
presence of outer encapsulating packet loss.</t>

</section>

<section title="Modes of operation">
<t>Just as with normal IPsec tunnels IP-TFS tunnels are unidirectional.
Bidirectional functionality is achieved by setting up 2 tunnels, one
in either direction.</t>

<t>An IP-TFS tunnel can operate in 2 modes, a non-congestion controlled
mode and congestion controlled mode.</t>

<section title="Non-Congestion Controlled Mode">
<t>In the non-congestion controlled mode IP-TFS sends fixed-sized
packets at a constant rate. The packet send rate is constant and is
not automatically adjusted regardless of any network congestion
(i.e., packet loss).</t>

<t>For similar reasons as given in <xref target="RFC7510"/> the non-congestion
controlled mode should only be used where the user has full
administrative control over the path the tunnel will take. This is
required so the user can guarantee the bandwidth and also be sure as
to not be negatively affecting network congestion <xref target="RFC2914"/>. In this
case packet loss should be reported to the administrator (e.g.,
via syslog, YANG notification, SNMP traps, etc) so that any
failures due to a lack of bandwidth can be corrected.</t>

</section>

<section title="Congestion Controlled Mode" anchor="sec-congestion-controlled-mode">
<t>With the congestion controlled mode, IP-TFS adapts to network
congestion by lowering the packet send rate to accommodate the
congestion. If congestion were handled in the network on a octet level
we might consider lowering the IPsec (encapsulation) packet size to
adapt; however, as congestion is normally handled in the network by
dropping packets we instead choose to lower the frequency we send our
fixed sized packets. This choice also minimizes transport overhead.</t>

<t>The output of a congestion control algorithm SHOULD adjust the
frequency that we send our packets until the congestion is
accommodated. We do not standardize the congestion control algorithm,
although the algorithm SHOULD conform to guidelines in <xref target="RFC2914"/>.</t>

<t>When an implementation is choosing a congestion control algorithm it
is worth noting that IP-TFS is not providing for reliable delivery of
IP traffic and so per packet ACKs are not required, and are not
provided.</t>

<t>It's perhaps important to note that the adjustable rate of sending
over the congestion controlled IP-TFS tunnel is being controlled by
the network congestion. As long as the encapsulated traffic flow
shape and timing are not directly affecting the network congestion,
the variations in the tunnel rate will not break the traffic flow
confidentiality.</t>

<section title="Circuit Breakers">
<t>In additional to congestion control, implementations may choose to
define and implement circuit breakers <xref target="RFC8084"/> as a recovery method
of last resort. Enabling circuit breakers is also a reason a user may
wish to enable congestion information reports even when using the
non-congestion controlled mode of operation. The definition of
circuit breakers are outside the scope of this document.</t>

</section>

</section>

</section>

</section>

<section title="Congestion Information">
<t>In order to support the congestion control mode, we send regular
packet drop reports from the receiver (egress tunnel endpoint) to the
sender. These reports indicate the number of packet drops during a
sequence of packets. The sequence or range of packets is identified
using the start and end ESP sequence numbers of the packet range.</t>

<t>These congestion information reports can also be sent when in the
non-congestion controlled mode to allow for reporting from the
sending device or to implement Circuit Breakers <xref target="RFC8084"/>.</t>

<t>The congestion information is sent using an IKEv2 INFORMATION
notifications <xref target="RFC7296"/>. These notifications are sent at a configured
interval (which can be configured to 0 to disable the sending of the
reports).</t>

<section title="ECN Support">
<t>In additional to normal packet loss information IP-TFS supports use
of the ECN bits in the encapsulating IP header <xref target="RFC3168"/> for
identifying congestion. If ECN use is enabled and a packet arrives at
the egress endpoint with the Congestion Experienced (CE) value set,
then the receiver records that packet as being dropped, although it
does not drop it. When the CE information is used to calculate the
packet drop count the receiver also sets the E bit in the congestion
information notification data. In order to respond quickly to the
congestion indication the receiver MAY immediately send a congestion
information notification to the sender upon receiving a packet with
the CE indication. This additional immediate send SHOULD only be done
once per normal congestion information sending interval though.</t>

<t>As noted in <xref target="RFC3168"/> the ECN bits are not protected by IPsec and
thus may constitute a covert channel. For this reason ECN use SHOULD
NOT be enabled by default.</t>

</section>

</section>

<section title="Configuration">
<t>IP-TFS is meant to be deployable with a minimal amount of
configuration. All IP-TFS specific configuration (i.e., in addition
to the underlying IPsec tunnel configuration) should be able to be
specified at the tunnel ingress (sending) side alone (i.e.,
single-ended provisioning).</t>

<section title="Bandwidth">
<t>Bandwidth is a local configuration option. For non-congestion
controlled mode the bandwidth SHOULD be configured. For
congestion controlled mode one can configure the bandwidth
or have no configuration and let congestion control discover the
maximum bandwidth available. No standardized configuration method is
required.</t>

</section>

<section title="Fixed Packet Size">
<t>The fixed packet size to be used for the tunnel encapsulation packets
can be configured manually or can be automatically determined using
Path MTU discovery (see <xref target="RFC1191"/> and <xref target="RFC8201"/>). No standardized
configuration method is required.</t>

</section>

<section title="Congestion Information Configuration">
<t>If congestion control mode is to be used, or if the user wishes to
receive congestion information on the sender for circuit breaking or
other operational notifications in the non-congestion controlled
mode, IP-TFS will need to configure the egress tunnel endpoint to
send congestion information periodically.</t>

<t>In order to configure the sending interval of periodic congestion
information on the egress tunnel endpoint, we utilize the IKEv2
Configuration Payload (CP) <xref target="RFC7296"/>. Implementations MAY also allow
for manual (or default) configuration of this interval; however,
implementations of IP-TFS MUST support configuration using the IKEv2
exchange described below.</t>

<t>We utilize a new IKEv2 configuration attribute TFS_INFO_INTERVAL
(TBD) to configure the sending interval from the egress endpoint of
the tunnel. This value is configured using a CFG_REQUEST payload and
is acknowledge by the receiver using a CFG_REPLY payload. This
configuration exchange SHOULD be sent during the IKEv2 configuration
exchanges occurring as the tunnel is first brought up. The sending
interval value MAY also be changed at any time afterwards using a
similar CFG_REQUEST/CFG_REPLY payload inside an IKEv2 INFORMATIONAL
exchange.</t>

<t>In the absence of a congestion information configuration exchange
the sending interval is up to the receiving device configuration.</t>

<t>The sending interval value is given in milliseconds and is 16 bits
wide; however, it is not recommended that values below 1/10th of a
second are used as this could lead to early exhaustion of the Message
ID field used in the IKEv2 INFORMATIONAL exchange to send the
congestion information.</t>

<t>{{question: Could we get away with sending the info using the same
message ID each time? We have a timestamp that would allow for
duplicate detection, and the payload will be authenticated by IKEv2.
}}</t>

<t>A sending interval value of 0 disables sending of the congestion
information.</t>

</section>

</section>

<section title="Packet and Data Formats">
<section title="IPSec">
<section title="Payload Format">
<figure><artwork><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |V|          Reserved           |          BlockOffset            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |       DataBlocks ...
 +-+-+-+-+-+-+-+-+-+-+-
]]></artwork></figure>

<t><list style="hanging">
<t hangText="V:"><vspace/>A 1 bit version field that MUST be set to zero. If received as
one the packet MUST be dropped.</t>
<t hangText="Reserved:"><vspace/>A 15 bit field set to 0 and ignored on receipt.</t>
<t hangText="BlockOffset:"><vspace/>A 16 bit unsigned integer counting the number of
octets following this 32 bit header before the next
data block. It can also point past the end of the
containing packet in which case the data entirely
belongs to the previous data block. If the offset
extends into subsequent packets the subsequent 32
bit IP-TFS headers are not counted by this value.</t>
<t hangText="DataBlocks:"><vspace/>Variable number of octets that constitute the start
or continuation of a previous data block.</t>
</list></t>

</section>

<section title="Data Blocks">
<figure><artwork><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | Type  | IPv4, IPv6 or pad...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
]]></artwork></figure>

<t><list style="hanging">
<t hangText="Type:"><vspace/>A 4 bit field where 0x0 identifies a pad data block, 0x4
indicates an IPv4 data block, and 0x6 indicates an IPv6
data block.</t>
</list></t>

<section title="IPv4 Data Block">
<figure><artwork><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |  0x4  |  IHL  |  TypeOfService  |         TotalLength           |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | Rest of the inner packet ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
]]></artwork></figure>

<t>These values are the actual values within the encapsulated IPv4
header. In other words, the start of this data block is the start of
the encapsulated IP packet.</t>

<t><list style="hanging">
<t hangText="Type:"><vspace/>A 4 bit value of 0x4 indicating IPv4 (i.e., first nibble of
the IPv4 packet).</t>
<t hangText="TotalLength:"><vspace/>The 16 bit unsigned integer length field of the IPv4
inner packet.</t>
</list></t>

</section>

<section title="IPv6 Data Block">
<figure><artwork><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |  0x6  | TrafficClass  |               FlowLabel                 |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |          TotalLength          | Rest of the inner packet ...
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
]]></artwork></figure>

<t>These values are the actual values within the encapsulated IPv6
header. In other words, the start of this data block is the start of
the encapsulated IP packet.</t>

<t><list style="hanging">
<t hangText="Type:"><vspace/>A 4 bit value of 0x6 indicating IPv6 (i.e., first nibble of
the IPv6 packet).</t>
<t hangText="TotalLength:"><vspace/>The 16 bit unsigned integer length field of the
inner IPv6 inner packet.</t>
</list></t>

</section>

<section title="Pad Data Block">
<figure><artwork><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |  0x0  | Padding ...
 +-+-+-+-+-+-+-+-+-+-+-
]]></artwork></figure>

<t><list style="hanging">
<t hangText="Type:"><vspace/>A 4 bit value of 0x0 indicating a padding data block.</t>
<t hangText="Padding:"><vspace/>extends to end of the encapsulating packet.</t>
</list></t>

</section>

</section>

</section>

<section title="IKEv2">
<section title="IKEv2 Congestion Information Configuration Attribute">
<t>The following defines the configuration attribute structure used in
the IKEv2 <xref target="RFC7296"/> configuration exchange to set the congestion
information report sending interval.</t>

<figure><artwork><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |R|       Attribute Type        |             Length              |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |            Interval           |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
<t hangText="R:"><vspace/>1 bit set to 0.</t>
<t hangText="Attribute Type:"><vspace/>15 bit value set to TFS_INFO_INTERVAL (TBD).</t>
<t hangText="Length:"><vspace/>2 octet length set to 2.</t>
<t hangText="SendInterval:"><vspace/>A 2 octet unsigned integer. The sending interval in
milliseconds.</t>
</list></t>

</section>

<section title="IKEv2 Congestion Information Notification Data">
<t>We utilize a send only (i.e., no response expected) IKEv2
INFORMATIONAL exchange (37) to transmit the congestion information
using a notification payload of type TFS_CONGEST_INFO (TBD). The The
Response bit should be set to 0. As no response is expected the only
payload should be the congestion information in the notification
payload. The following diagram defines the notification payload data.</t>

<figure><artwork><![CDATA[
                      1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |E|  Reserved   |                  DropCount                      |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                          Timestamp                              |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                          AckSeqStart                            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                          AckSeqEnd                              |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
]]></artwork></figure>

<t><list style="hanging">
<t hangText="E:"><vspace/>A 1 bit value that if set indicates that packet[s] with
Congestion Experienced (CE) ECN bits set were received and
used in calculating the DropCount value.</t>
<t hangText="Reserved:"><vspace/>A 7 bit field set to 0 ignored on receipt.</t>
<t hangText="DropCount:"><vspace/>A 24 bit unsigned integer count of the drops that
occurred between AckSeqStart and AckSeqEnd. If the
drops exceed the resolution of the counter then set to
the maximum value (i.e., 0xFFFFFF).</t>
<t hangText="AckSeqStart:"><vspace/>A 32 bit unsigned integer containing the first ESP
sequence number (as defined in <xref target="RFC4303"/>) of the
packet range that this information relates to.</t>
<t hangText="AckSeqEnd:"><vspace/>A 32 bit unsigned integer containing the last ESP
sequence number (as defined in <xref target="RFC4303"/>) of the
packet range that this information relates to.</t>
<t hangText="Timestamp:"><vspace/>A 32 bit unsigned integer containing the lower 32
bits of a running monotonic millisecond timer of when
this notification data was created/sent. This value is
used to determine duplicates and drop counts of this
information. Implementations should deal with wrapping
of this timer value.</t>
</list></t>

</section>

</section>

</section>

<section title="IANA Considerations">
<t>This document requests a protocol number IPTFS_PROTOCOL be allocated
by IANA from "Assigned Internet Protocol Numbers" registry for
identifying the IP-TFS ESP payload format.</t>

<t>Type: TBD
Description: IP-TFS ESP payload format.
Reference: This document</t>

<t>Additionally this document requests an attribute value
TFS_INFO_INTERVAL (TBD) be allocated by IANA from "IKEv2
Configuration Payload Attribute Types" registry.</t>

<t>Type: TBD
Description: The sending rate of congestion information from egress
	     tunnel endpoint.
Reference: This document</t>

<t>Additionally this document requests a notify message status type
TFS_CONGEST_INFO (TBD) be allocated by IANA from "IKEv2 Notify
Message Types - Status Types" registry.</t>

<t>Type: TBD
Description: The sending rate of congestion information from egress
	     tunnel endpoint.
Reference: This document</t>

</section>

<section title="Security Considerations">
<t>This document describes a mechanism to add Traffic Flow
Confidentiality to IP traffic. Use of this mechanism is expected to
increase the security of the traffic being transported. Other than
the additional security afforded by using this mechanism, IP-TFS
utilizes the security protocols <xref target="RFC4303"/> and <xref target="RFC7296"/> and so their
security considerations apply to IP-TFS as well.</t>

<t>As noted previously in <xref target="sec-congestion-controlled-mode"></xref>, for TFC to be
fully maintained the encapsulated traffic flow should not be
affecting network congestion in a predictable way, and if it would be
then non-congestion controlled mode use should be considered instead.</t>

</section>

</middle>
<back>
<references title="Normative References">


<reference  anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>


<reference  anchor='RFC4303' target='https://www.rfc-editor.org/info/rfc4303'>
<front>
<title>IP Encapsulating Security Payload (ESP)</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the Encapsulating Security Payload (ESP) protocol, which is designed to provide a mix of security services in IPv4 and IPv6.  ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.  This document obsoletes RFC 2406 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4303'/>
<seriesInfo name='DOI' value='10.17487/RFC4303'/>
</reference>


<reference  anchor='RFC7296' target='https://www.rfc-editor.org/info/rfc7296'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
<author initials='C.' surname='Kaufman' fullname='C. Kaufman'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='October' />
<abstract><t>This document describes version 2 of the Internet Key Exchange (IKE) protocol.  IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs).  This document obsoletes RFC 5996, and includes all of the errata for it.  It advances IKEv2 to be an Internet Standard.</t></abstract>
</front>
<seriesInfo name='STD' value='79'/>
<seriesInfo name='RFC' value='7296'/>
<seriesInfo name='DOI' value='10.17487/RFC7296'/>
</reference>


<reference  anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>
</references>
<references title="Informative References">
<reference anchor="AppCrypt">
<front>
<title>Applied Cryptography: Protocols, Algorithms, and Source Code in C</title>
<author initials='B.' surname='Schneier' fullname='Bruce Schneier'><organization/></author>
<date day="1" month="11" year="2017"/>
</front>
</reference>


<reference  anchor='RFC0791' target='https://www.rfc-editor.org/info/rfc791'>
<front>
<title>Internet Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<date year='1981' month='September' />
</front>
<seriesInfo name='STD' value='5'/>
<seriesInfo name='RFC' value='791'/>
<seriesInfo name='DOI' value='10.17487/RFC0791'/>
</reference>


<reference  anchor='RFC1191' target='https://www.rfc-editor.org/info/rfc1191'>
<front>
<title>Path MTU discovery</title>
<author initials='J.C.' surname='Mogul' fullname='J.C. Mogul'><organization /></author>
<author initials='S.E.' surname='Deering' fullname='S.E. Deering'><organization /></author>
<date year='1990' month='November' />
<abstract><t>This memo describes a technique for dynamically discovering the maximum transmission unit (MTU) of an arbitrary internet path.  It specifies a small change to the way routers generate one type of ICMP message.  For a path that passes through a router that has not been so changed, this technique might not discover the correct Path MTU, but it will always choose a Path MTU as accurate as, and in many cases more accurate than, the Path MTU that would be chosen by current practice.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='1191'/>
<seriesInfo name='DOI' value='10.17487/RFC1191'/>
</reference>


<reference  anchor='RFC2474' target='https://www.rfc-editor.org/info/rfc2474'>
<front>
<title>Definition of the Differentiated Services Field (DS Field) in the IPv4 and IPv6 Headers</title>
<author initials='K.' surname='Nichols' fullname='K. Nichols'><organization /></author>
<author initials='S.' surname='Blake' fullname='S. Blake'><organization /></author>
<author initials='F.' surname='Baker' fullname='F. Baker'><organization /></author>
<author initials='D.' surname='Black' fullname='D. Black'><organization /></author>
<date year='1998' month='December' />
<abstract><t>This document defines the IP header field, called the DS (for differentiated services) field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2474'/>
<seriesInfo name='DOI' value='10.17487/RFC2474'/>
</reference>


<reference  anchor='RFC2914' target='https://www.rfc-editor.org/info/rfc2914'>
<front>
<title>Congestion Control Principles</title>
<author initials='S.' surname='Floyd' fullname='S. Floyd'><organization /></author>
<date year='2000' month='September' />
<abstract><t>The goal of this document is to explain the need for congestion control in the Internet, and to discuss what constitutes correct congestion control.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='41'/>
<seriesInfo name='RFC' value='2914'/>
<seriesInfo name='DOI' value='10.17487/RFC2914'/>
</reference>


<reference  anchor='RFC3168' target='https://www.rfc-editor.org/info/rfc3168'>
<front>
<title>The Addition of Explicit Congestion Notification (ECN) to IP</title>
<author initials='K.' surname='Ramakrishnan' fullname='K. Ramakrishnan'><organization /></author>
<author initials='S.' surname='Floyd' fullname='S. Floyd'><organization /></author>
<author initials='D.' surname='Black' fullname='D. Black'><organization /></author>
<date year='2001' month='September' />
<abstract><t>This memo specifies the incorporation of ECN (Explicit Congestion Notification) to TCP and IP, including ECN's use of two bits in the IP header.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3168'/>
<seriesInfo name='DOI' value='10.17487/RFC3168'/>
</reference>


<reference  anchor='RFC4301' target='https://www.rfc-editor.org/info/rfc4301'>
<front>
<title>Security Architecture for the Internet Protocol</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<author initials='K.' surname='Seo' fullname='K. Seo'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the &quot;Security Architecture for IP&quot;, which is designed to provide security services for traffic at the IP layer.  This document obsoletes RFC 2401 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4301'/>
<seriesInfo name='DOI' value='10.17487/RFC4301'/>
</reference>


<reference  anchor='RFC7510' target='https://www.rfc-editor.org/info/rfc7510'>
<front>
<title>Encapsulating MPLS in UDP</title>
<author initials='X.' surname='Xu' fullname='X. Xu'><organization /></author>
<author initials='N.' surname='Sheth' fullname='N. Sheth'><organization /></author>
<author initials='L.' surname='Yong' fullname='L. Yong'><organization /></author>
<author initials='R.' surname='Callon' fullname='R. Callon'><organization /></author>
<author initials='D.' surname='Black' fullname='D. Black'><organization /></author>
<date year='2015' month='April' />
<abstract><t>This document specifies an IP-based encapsulation for MPLS, called MPLS-in-UDP for situations where UDP (User Datagram Protocol) encapsulation is preferred to direct use of MPLS, e.g., to enable UDP-based ECMP (Equal-Cost Multipath) or link aggregation.  The MPLS- in-UDP encapsulation technology must only be deployed within a single network (with a single network operator) or networks of an adjacent set of cooperating network operators where traffic is managed to avoid congestion, rather than over the Internet where congestion control is required.  Usage restrictions apply to MPLS-in-UDP usage for traffic that is not congestion controlled and to UDP zero checksum usage with IPv6.</t></abstract>
</front>
<seriesInfo name='RFC' value='7510'/>
<seriesInfo name='DOI' value='10.17487/RFC7510'/>
</reference>


<reference  anchor='RFC8084' target='https://www.rfc-editor.org/info/rfc8084'>
<front>
<title>Network Transport Circuit Breakers</title>
<author initials='G.' surname='Fairhurst' fullname='G. Fairhurst'><organization /></author>
<date year='2017' month='March' />
<abstract><t>This document explains what is meant by the term &quot;network transport                          Circuit Breaker&quot;.  It describes the need for Circuit Breakers (CBs) for network tunnels and applications when using non-congestion- controlled traffic and explains where CBs are, and are not, needed. It also defines requirements for building a CB and the expected outcomes of using a CB within the Internet.</t></abstract>
</front>
<seriesInfo name='BCP' value='208'/>
<seriesInfo name='RFC' value='8084'/>
<seriesInfo name='DOI' value='10.17487/RFC8084'/>
</reference>


<reference  anchor='RFC8200' target='https://www.rfc-editor.org/info/rfc8200'>
<front>
<title>Internet Protocol, Version 6 (IPv6) Specification</title>
<author initials='S.' surname='Deering' fullname='S. Deering'><organization /></author>
<author initials='R.' surname='Hinden' fullname='R. Hinden'><organization /></author>
<date year='2017' month='July' />
<abstract><t>This document specifies version 6 of the Internet Protocol (IPv6). It obsoletes RFC 2460.</t></abstract>
</front>
<seriesInfo name='STD' value='86'/>
<seriesInfo name='RFC' value='8200'/>
<seriesInfo name='DOI' value='10.17487/RFC8200'/>
</reference>


<reference  anchor='RFC8201' target='https://www.rfc-editor.org/info/rfc8201'>
<front>
<title>Path MTU Discovery for IP version 6</title>
<author initials='J.' surname='McCann' fullname='J. McCann'><organization /></author>
<author initials='S.' surname='Deering' fullname='S. Deering'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<author initials='R.' surname='Hinden' fullname='R. Hinden' role='editor'><organization /></author>
<date year='2017' month='July' />
<abstract><t>This document describes Path MTU Discovery (PMTUD) for IP version 6. It is largely derived from RFC 1191, which describes Path MTU Discovery for IP version 4.  It obsoletes RFC 1981.</t></abstract>
</front>
<seriesInfo name='STD' value='87'/>
<seriesInfo name='RFC' value='8201'/>
<seriesInfo name='DOI' value='10.17487/RFC8201'/>
</reference>


<reference anchor='I-D.iab-wire-image'>
<front>
<title>The Wire Image of a Network Protocol</title>

<author initials='B' surname='Trammell' fullname='Brian Trammell'>
    <organization />
</author>

<author initials='M' surname='Kuehlewind' fullname='Mirja Kuehlewind'>
    <organization />
</author>

<date month='November' day='5' year='2018' />

<abstract><t>This document defines the wire image, an abstraction of the information available to an on-path non-participant in a networking protocol.  This abstraction is intended to shed light on the implications on increased encryption has for network functions that use the wire image.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-iab-wire-image-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-iab-wire-image-01.txt' />
</reference>
</references>

<section title="Comparisons of IP-TFS" anchor="sec-comparisons-of-ip-tfs">

<section title="Comparing Overhead">
<section title="IP-TFS Overhead">
<t>The overhead of IP-TFS is 40 bytes per outer packet. Therefore the
octet overhead per inner packet is 40 divided by the number of outer
packets required (fractional allowed). The overhead as a percentage of
inner packet size is a constant based on the Outer MTU size.</t>

<figure><artwork><![CDATA[
   OH = 40 / Outer Payload Size / Inner Packet Size
   OH % of Inner Packet Size = 100 * OH / Inner Packet Size
   OH % of Inner Packet Size = 4000 / Outer Payload Size
]]></artwork></figure>

<figure><artwork><![CDATA[
		     Type  IP-TFS  IP-TFS  IP-TFS 
		      MTU     576    1500    9000 
		    PSize     536    1460    8960 
		   -------------------------------
		       40   7.46%   2.74%   0.45% 
		      576   7.46%   2.74%   0.45% 
		     1500   7.46%   2.74%   0.45% 
		     9000   7.46%   2.74%   0.45% 
]]></artwork></figure>

</section>

<section title="ESP with Padding Overhead">
<t>The overhead per inner packet for constant send rate padded ESP
(i.e., traditional IPSec TFC) is 36 octets plus any padding, unless
fragmentation is required.</t>

<t>When fragmentation of the inner packet is required to fit in the
outer IPsec packet, overhead is the number of outer packets required
to carry the fragmented inner packet times both the inner IP overhead
(20) and the outer packet overhead (36) minus the initial inner IP
overhead plus any required tail padding in the last encap packet. The
required tail padding is the number of required packets times the
difference of the Outer Payload Size and the IP Overhead minus the
the Inner Payload Size. So:</t>

<figure><artwork><![CDATA[
  Inner Paylaod Size = IP Packet Size - IP Overhead
  Outer Payload Size = MTU - IPSec Overhead

                Inner Payload Size
  NF0 = ----------------------------------
         Outer Payload Size - IP Overhead

  NF = CEILING(NF0)

  OH = NF * (IP Overhead + IPsec Overhead)
       - IP Overhead
       + NF * (Outer Payload Size - IP Overhead)
       - Inner Payload Size

  OH = NF * (IPSec Overhead + Outer Payload Size)
       - (IP Overhead + Inner Payload Size)

  OH = NF * (IPSec Overhead + Outer Payload Size)
       - Inner Packet Size
]]></artwork></figure>

</section>

</section>

<section title="Overhead Comparison">
<t>The following 2 tables collect the overhead values for some common
MTU sizes in order to compare them. The first table is the number of
octets of overhead for a given MTU sized packet. The second table is
the percentage of overhead in the same MTU sized packet.</t>

<figure><artwork><![CDATA[
        Type  ESP+Pad  ESP+Pad  ESP+Pad  IP-TFS  IP-TFS  IP-TFS 
         MTU      576     1500     9000     576    1500    9000 
       PSize      540     1464     8964     536    1460    8960 
      ----------------------------------------------------------
          40      500     1424     8924     3.0     1.1     0.2 
         128      412     1336     8836     9.6     3.5     0.6 
         256      284     1208     8708    19.1     7.0     1.1 
         536        4      928     8428    40.0    14.7     2.4 
         576      576      888     8388    43.0    15.8     2.6 
        1460      268        4     7504   109.0    40.0     6.5 
        1500      228     1500     7464   111.9    41.1     6.7 
        8960     1408     1540        4   668.7   245.5    40.0 
        9000     1368     1500     9000   671.6   246.6    40.2 
]]></artwork></figure>

<figure><artwork><![CDATA[
       Type  ESP+Pad  ESP+Pad   ESP+Pad  IP-TFS  IP-TFS  IP-TFS 
        MTU      576     1500      9000     576    1500    9000 
      PSize      540     1464      8964     536    1460    8960 
     -----------------------------------------------------------
         40  1250.0%  3560.0%  22310.0%   7.46%   2.74%   0.45% 
        128   321.9%  1043.8%   6903.1%   7.46%   2.74%   0.45% 
        256   110.9%   471.9%   3401.6%   7.46%   2.74%   0.45% 
        536     0.7%   173.1%   1572.4%   7.46%   2.74%   0.45% 
        576   100.0%   154.2%   1456.2%   7.46%   2.74%   0.45% 
       1460    18.4%     0.3%    514.0%   7.46%   2.74%   0.45% 
       1500    15.2%   100.0%    497.6%   7.46%   2.74%   0.45% 
       8960    15.7%    17.2%      0.0%   7.46%   2.74%   0.45% 
       9000    15.2%    16.7%    100.0%   7.46%   2.74%   0.45% 
]]></artwork></figure>

</section>

<section title="Comparing Available Bandwidth">
<t>Another way to compare the two solutions is to look at the amount of
available bandwidth each solution provides. The following sections
consider and compare the percentage of available bandwidth. For the
sake of comparison we will also consider a 10G Ethernet link and
normal ESP. For each solution we subtract the required outer framing
overhead.</t>

<section title="Ethernet">
<t>In order to calculate the available bandwidth we first calculate the
per packet overhead in bits. The total overhead of Ethernet is 14+4
octets of header and CRC plus and additional 20 octets of framing
(preamble, start, and inter-packet gap) for a total of 48 octets.
Additionally the minimum payload is 46 octets.</t>

<figure><artwork><![CDATA[
  IP Size    ESP+Pad    ESP+Pad    ESP+Pad   Ethernet        ESP 
      MTU        576       1500       9000       var.       var. 
 Fixed OH                                          38         74 
-----------------------------------------------------------------
       40  2140411.0  828912.47  138765.54  14880952.  10964912. 
      128  2162629.8  832223.70  138858.03  7530120.5  6188118.8 
      256  2162629.8  832223.70  138858.03  4251700.7  3787878.8 
      536  2162629.8  832223.70  138858.03  2177700.3  2049180.3 
      576  1050420.2  832223.70  138858.03  2035830.6  1923076.9 
     1460  707814.27  832223.70  138858.03  834445.93  814863.10 
     1500  707814.27  411454.90  138858.03  812743.82  794155.02 
     8960                                   138919.76  138366.17 
     9000  120123.01  118618.33  69298.148  138304.93  137756.23 
]]></artwork></figure>

<figure><artwork><![CDATA[
 IP Size  E+P 576  E+P 1500  E+P 9000  Ethernet      ESP 
---------------------------------------------------------
      40    6.41%     2.58%     0.44%    47.62%   86.96% 
     128   18.13%     7.85%     1.40%    77.11%  100.00% 
     256   43.84%    16.98%     2.84%   304.76%  224.56% 
     536   92.73%    35.69%     5.95%   322.89%  265.35% 
     576   99.65%    38.35%     6.40%   195.92%  174.55% 
    1460  252.60%    97.20%    16.22%   254.36%  239.34% 
    1500  126.05%    99.87%    16.66%   244.30%  230.77% 
    8960  507.36%   596.54%    99.53%   598.13%  584.09% 
    9000  509.63%   296.25%    99.98%   585.18%  571.79% 
]]></artwork></figure>

</section>

</section>

</section>


<section title="Acknowledgements">
<t>We would like to thank Don Fedyk for help in reviewing this work.</t>

</section>

<section title="Contributors">
<t>The following people made significant contributions to this document.</t>

<figure><artwork><![CDATA[
   Lou Berger
   LabN Consulting, L.L.C.

   Email: lberger@labn.net
]]></artwork></figure>

</section>
  </back>
</rfc>
